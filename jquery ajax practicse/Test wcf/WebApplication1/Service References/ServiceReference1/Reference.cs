//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Calc", Namespace="http://schemas.datacontract.org/2004/07/Test_wcf")]
    [System.SerializableAttribute()]
    public partial class Calc : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FirstField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int First {
            get {
                return this.FirstField;
            }
            set {
                if ((this.FirstField.Equals(value) != true)) {
                    this.FirstField = value;
                    this.RaisePropertyChanged("First");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalcArithmeticservice")]
    public interface ICalcArithmeticservice {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Add", ReplyAction="http://tempuri.org/ICalcArithmeticservice/AddResponse")]
        WebApplication1.ServiceReference1.Calc Add(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Add", ReplyAction="http://tempuri.org/ICalcArithmeticservice/AddResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> AddAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Sub", ReplyAction="http://tempuri.org/ICalcArithmeticservice/SubResponse")]
        WebApplication1.ServiceReference1.Calc Sub(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Sub", ReplyAction="http://tempuri.org/ICalcArithmeticservice/SubResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> SubAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Mul", ReplyAction="http://tempuri.org/ICalcArithmeticservice/MulResponse")]
        WebApplication1.ServiceReference1.Calc Mul(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcArithmeticservice/Mul", ReplyAction="http://tempuri.org/ICalcArithmeticservice/MulResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> MulAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcArithmeticserviceChannel : WebApplication1.ServiceReference1.ICalcArithmeticservice, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcArithmeticserviceClient : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.ICalcArithmeticservice>, WebApplication1.ServiceReference1.ICalcArithmeticservice {
        
        public CalcArithmeticserviceClient() {
        }
        
        public CalcArithmeticserviceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcArithmeticserviceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcArithmeticserviceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcArithmeticserviceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebApplication1.ServiceReference1.Calc Add(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.Add(p1, p2);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> AddAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.AddAsync(p1, p2);
        }
        
        public WebApplication1.ServiceReference1.Calc Sub(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.Sub(p1, p2);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> SubAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.SubAsync(p1, p2);
        }
        
        public WebApplication1.ServiceReference1.Calc Mul(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.Mul(p1, p2);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Calc> MulAsync(WebApplication1.ServiceReference1.Calc p1, WebApplication1.ServiceReference1.Calc p2) {
            return base.Channel.MulAsync(p1, p2);
        }
    }
}
