// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestCodeFirst.EntityContext;

namespace TestCodeFirst.Migrations
{
    [DbContext(typeof(NorthwindContext))]
    partial class NorthwindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("dblink")
                .HasAnnotation("Relational:Collation", "English_India.1252")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TestCodeFirst.Entities.Category", b =>
                {
                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("bytea")
                        .HasColumnName("picture");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("char")
                        .HasColumnName("customer_id");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_title");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("country");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("fax");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("region");

                    b.HasKey("CustomerId");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.CustomerCustomerDemo", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("char")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("char")
                        .HasColumnName("customer_type_id");

                    b.HasKey("CustomerId", "CustomerTypeId")
                        .HasName("pk_customer_customer_demo");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("customer_customer_demo");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.CustomerDemographic", b =>
                {
                    b.Property<string>("CustomerTypeId")
                        .HasColumnType("char")
                        .HasColumnName("customer_type_id");

                    b.Property<string>("CustomerDesc")
                        .HasColumnType("text")
                        .HasColumnName("customer_desc");

                    b.HasKey("CustomerTypeId")
                        .HasName("pk_customer_demographics");

                    b.ToTable("customer_demographics");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Employee", b =>
                {
                    b.Property<short>("EmployeeId")
                        .HasColumnType("smallint")
                        .HasColumnName("employee_id");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("country");

                    b.Property<string>("Extension")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("extension");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("home_phone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("photo_path");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("region");

                    b.Property<short?>("ReportsTo")
                        .HasColumnType("smallint")
                        .HasColumnName("reports_to");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.Property<string>("TitleOfCourtesy")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("title_of_courtesy");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ReportsTo");

                    b.HasIndex(new[] { "HomePhone" }, "idx_home_phone");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.EmployeeTerritory", b =>
                {
                    b.Property<short>("EmployeeId")
                        .HasColumnType("smallint")
                        .HasColumnName("employee_id");

                    b.Property<string>("TerritoryId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("territory_id");

                    b.HasKey("EmployeeId", "TerritoryId")
                        .HasName("pk_employee_territories");

                    b.HasIndex("TerritoryId");

                    b.ToTable("employee_territories");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Order", b =>
                {
                    b.Property<short>("OrderId")
                        .HasColumnType("smallint")
                        .HasColumnName("order_id");

                    b.Property<string>("CustomerId")
                        .HasColumnType("char")
                        .HasColumnName("customer_id");

                    b.Property<short?>("EmployeeId")
                        .HasColumnType("smallint")
                        .HasColumnName("employee_id");

                    b.Property<float?>("Freight")
                        .HasColumnType("real")
                        .HasColumnName("freight");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("date")
                        .HasColumnName("required_date");

                    b.Property<string>("ShipAddress")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("ship_address");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_city");

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_country");

                    b.Property<string>("ShipName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("ship_name");

                    b.Property<string>("ShipPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("ship_postal_code");

                    b.Property<string>("ShipRegion")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ship_region");

                    b.Property<short?>("ShipVia")
                        .HasColumnType("smallint")
                        .HasColumnName("ship_via");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("date")
                        .HasColumnName("shipped_date");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipVia");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.OrderDetail", b =>
                {
                    b.Property<short>("OrderId")
                        .HasColumnType("smallint")
                        .HasColumnName("order_id");

                    b.Property<short>("ProductId")
                        .HasColumnType("smallint")
                        .HasColumnName("product_id");

                    b.Property<float>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unit_price");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("pk_order_details");

                    b.HasIndex("ProductId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Product", b =>
                {
                    b.Property<short>("ProductId")
                        .HasColumnType("smallint")
                        .HasColumnName("product_id");

                    b.Property<short?>("CategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("category_id");

                    b.Property<int>("Discontinued")
                        .HasColumnType("integer")
                        .HasColumnName("discontinued");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("product_name");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("quantity_per_unit");

                    b.Property<short?>("ReorderLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("reorder_level");

                    b.Property<short?>("SupplierId")
                        .HasColumnType("smallint")
                        .HasColumnName("supplier_id");

                    b.Property<float?>("UnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("unit_price");

                    b.Property<short?>("UnitsInStock")
                        .HasColumnType("smallint")
                        .HasColumnName("units_in_stock");

                    b.Property<short?>("UnitsOnOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("units_on_order");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Region", b =>
                {
                    b.Property<short>("RegionId")
                        .HasColumnType("smallint")
                        .HasColumnName("region_id");

                    b.Property<string>("RegionDescription")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasColumnName("region_description");

                    b.HasKey("RegionId");

                    b.ToTable("region");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Shipper", b =>
                {
                    b.Property<short>("ShipperId")
                        .HasColumnType("smallint")
                        .HasColumnName("shipper_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("company_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.HasKey("ShipperId");

                    b.ToTable("shippers");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Supplier", b =>
                {
                    b.Property<short>("SupplierId")
                        .HasColumnType("smallint")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("city");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_name");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("contact_title");

                    b.Property<string>("Country")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("country");

                    b.Property<string>("Fax")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("fax");

                    b.Property<string>("Homepage")
                        .HasColumnType("text")
                        .HasColumnName("homepage");

                    b.Property<string>("Phone")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("region");

                    b.HasKey("SupplierId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Temptable", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.ToTable("temptable");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Territory", b =>
                {
                    b.Property<string>("TerritoryId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("territory_id");

                    b.Property<short>("RegionId")
                        .HasColumnType("smallint")
                        .HasColumnName("region_id");

                    b.Property<string>("TerritoryDescription")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasColumnName("territory_description");

                    b.HasKey("TerritoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("territories");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.UsState", b =>
                {
                    b.Property<short>("StateId")
                        .HasColumnType("smallint")
                        .HasColumnName("state_id");

                    b.Property<string>("StateAbbr")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state_abbr");

                    b.Property<string>("StateName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state_name");

                    b.Property<string>("StateRegion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state_region");

                    b.HasKey("StateId")
                        .HasName("pk_usstates");

                    b.ToTable("us_states");
                });

            modelBuilder.Entity("TestCodeFirst.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Active")
                        .HasColumnType("integer");

                    b.Property<string>("FromAddress")
                        .HasColumnType("text");

                    b.Property<string>("FromDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Passphrase")
                        .HasColumnType("text");

                    b.Property<int>("PortNo")
                        .HasColumnType("integer");

                    b.Property<int>("RequireAuthentication")
                        .HasColumnType("integer");

                    b.Property<int>("UseSSL")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("server")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.CustomerCustomerDemo", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Customer", "Customer")
                        .WithMany("CustomerCustomerDemos")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_customer_customer_demo_customers")
                        .IsRequired();

                    b.HasOne("TestCodeFirst.Entities.CustomerDemographic", "CustomerType")
                        .WithMany("CustomerCustomerDemos")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("fk_customer_customer_demo_customer_demographics")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Employee", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Employee", "ReportsToNavigation")
                        .WithMany("InverseReportsToNavigation")
                        .HasForeignKey("ReportsTo")
                        .HasConstraintName("fk_employees_employees");

                    b.Navigation("ReportsToNavigation");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.EmployeeTerritory", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Employee", "Employee")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee_territories_employees")
                        .IsRequired();

                    b.HasOne("TestCodeFirst.Entities.Territory", "Territory")
                        .WithMany("EmployeeTerritories")
                        .HasForeignKey("TerritoryId")
                        .HasConstraintName("fk_employee_territories_territories")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Order", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_orders_customers");

                    b.HasOne("TestCodeFirst.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_orders_employees");

                    b.HasOne("TestCodeFirst.Entities.Shipper", "ShipViaNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("ShipVia")
                        .HasConstraintName("fk_orders_shippers");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("ShipViaNavigation");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.OrderDetail", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_details_orders")
                        .IsRequired();

                    b.HasOne("TestCodeFirst.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_order_details_products")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Product", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_categories");

                    b.HasOne("TestCodeFirst.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_products_suppliers");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Territory", b =>
                {
                    b.HasOne("TestCodeFirst.Entities.Region", "Region")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_territories_region")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Customer", b =>
                {
                    b.Navigation("CustomerCustomerDemos");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.CustomerDemographic", b =>
                {
                    b.Navigation("CustomerCustomerDemos");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeTerritories");

                    b.Navigation("InverseReportsToNavigation");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Region", b =>
                {
                    b.Navigation("Territories");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TestCodeFirst.Entities.Territory", b =>
                {
                    b.Navigation("EmployeeTerritories");
                });
#pragma warning restore 612, 618
        }
    }
}
